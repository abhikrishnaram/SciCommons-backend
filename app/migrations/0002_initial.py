# Generated by Django 5.0.3 on 2024-03-11 19:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("app", "0001_initial"),
        ("article", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="articlemessage",
            name="article",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="article_group",
                to="article.article",
            ),
        ),
        migrations.AddField(
            model_name="articlemessage",
            name="sender",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sent_article_messages",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="blockpersonalmessage",
            name="receiver",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reciever_message",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="blockpersonalmessage",
            name="sender",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sender_message",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="bookmark",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="communitymember",
            name="community",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.community"
            ),
        ),
        migrations.AddField(
            model_name="communitymember",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="community",
            name="members",
            field=models.ManyToManyField(
                related_name="members",
                through="app.CommunityMember",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="communitymeta",
            name="article",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="article_meta",
                to="article.article",
            ),
        ),
        migrations.AddField(
            model_name="communitymeta",
            name="community",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.community"
            ),
        ),
        migrations.AddField(
            model_name="communityrequests",
            name="community",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="requests",
                to="app.community",
            ),
        ),
        migrations.AddField(
            model_name="communityrequests",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="requests",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="emailverify",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="favourite",
            name="article",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="article.article"
            ),
        ),
        migrations.AddField(
            model_name="favourite",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="follow",
            name="followed_user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="followers",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="follow",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="following",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="forgetpassword",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="moderator",
            name="community",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.community"
            ),
        ),
        migrations.AddField(
            model_name="moderator",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="notification",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="officialreviewer",
            name="User",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="officialreviewer",
            name="community",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="app.community",
            ),
        ),
        migrations.AddField(
            model_name="personalmessage",
            name="receiver",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="block_reciever_message",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="personalmessage",
            name="sender",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="block_sender_message",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="rank",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="socialpost",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="bookmark",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.socialpost"
            ),
        ),
        migrations.AddField(
            model_name="socialpostcomment",
            name="parent_comment",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="replies",
                to="app.socialpostcomment",
            ),
        ),
        migrations.AddField(
            model_name="socialpostcomment",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="comments",
                to="app.socialpost",
            ),
        ),
        migrations.AddField(
            model_name="socialpostcomment",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="socialpostcommentlike",
            name="comment",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="likes",
                to="app.socialpostcomment",
            ),
        ),
        migrations.AddField(
            model_name="socialpostcommentlike",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="socialpostlike",
            name="post",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="likes",
                to="app.socialpost",
            ),
        ),
        migrations.AddField(
            model_name="socialpostlike",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="subscribe",
            name="community",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="app.community"
            ),
        ),
        migrations.AddField(
            model_name="subscribe",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="unregistereduser",
            name="article",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="article.article"
            ),
        ),
        migrations.AddField(
            model_name="useractivity",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddConstraint(
            model_name="communitymember",
            constraint=models.UniqueConstraint(
                fields=("community", "user"), name="unique_admin_per_community"
            ),
        ),
        migrations.AddConstraint(
            model_name="communitymember",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_admin", True)),
                fields=("user", "is_admin"),
                name="only_one_community_admin",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="communitymeta",
            unique_together={("article", "community")},
        ),
        migrations.AlterUniqueTogether(
            name="favourite",
            unique_together={("user", "article")},
        ),
        migrations.AlterUniqueTogether(
            name="moderator",
            unique_together={("user", "community")},
        ),
        migrations.AlterUniqueTogether(
            name="officialreviewer",
            unique_together={("User", "community")},
        ),
        migrations.AlterUniqueTogether(
            name="bookmark",
            unique_together={("user", "post")},
        ),
    ]
