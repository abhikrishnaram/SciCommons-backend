"""
Django settings for Website project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os 
from decouple import config
from dj_database_url import parse
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$$n^0_i1iuqd91m+dc_=)kj8o)q$o#)3m5#hl+h3n=vt-#mkz)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["scicommons-backend.onrender.com","127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework_swagger',
    'drf_yasg',
    'channels',
    'django_extensions'
    
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    "DEFAULT_PARSER_CLASSES":[
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'],

    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",

    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 50
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'Website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTH_USER_MODEL = 'app.User'


GRAPH_MODELS = {
  'all_applications': True,
  'group_models': True,
  'app_labels': ["app"],
}


WSGI_APPLICATION = 'Website.wsgi.application'
ASGI_APPLICATION = 'app.routing.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('DBNAME'),
#         'USER': config('DBUSER'),
#         'PASSWORD': config('DBPASSWORD'),
#         'HOST': config('DBHOST'),
#         'PORT': config('DBPORT'),
#     }
# }

DATABASES = {
    'default':parse(config('DATABASE_URL'))
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True







# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# TOKEN_COOKIE_NAME = 'Token'
# TOKEN_COOKIE_AGE = 60 * 60 * 24 * 7

# Base url to serve media files  
MEDIA_URL = '/media/'  
STATIC_URL = '/static/'
# Path where media is stored  
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/') 
STATIC_ROOT = os.path.join(BASE_DIR, 'static/') 



CORS_ORIGIN_ALLOW_ALL=True



CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'Authorization',
    'content-type',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    # 'Token', # Add any custom headers here
]


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
}

SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': True,
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
}

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}

EMAIL_BACKEND = parse(config('EMAIL_BACKEND'))
EMAIL_HOST = parse(config('EMAIL_HOST'))
EMAIL_HOST_USER = parse(config('EMAIL_HOST_USER'))
EMAIL_HOST_PASSWORD = parse(config('EMAIL_HOST_PASSWORD'))
EMAIL_PORT = parse(config('EMAIL_PORT'))
EMAIL_USE_TLS = parse(config('EMAIL_USE_TLS'))
DEFAULT_FROM_EMAIL = parse(config('DEFAULT_FROM_EMAIL'))


AWS_ACCESS_KEY_ID = parse(config('AWS_ACCESS_KEY_ID'))
AWS_SECRET_ACCESS_KEY = parse(config('AWS_SECRET_ACCESS_KEY'))
AWS_STORAGE_BUCKET_NAME = parse(config('AWS_STORAGE_BUCKET_NAME'))
AWS_S3_SIGNATURE_NAME = parse(config('AWS_S3_SIGNATURE_NAME'))
AWS_S3_REGION_NAME = parse(config('AWS_S3_REGION_NAME'))
AWS_S3_FILE_OVERWRITE = parse(config('AWS_S3_FILE_OVERWRITE'))
AWS_DEFAULT_ACL = parse(config('AWS_DEFAULT_ACL'))
AWS_S3_VERITY = parse(config('AWS_S3_VERITY'))
DEFAULT_FILE_STORAGE = parse(config('DEFAULT_FILE_STORAGE'))
